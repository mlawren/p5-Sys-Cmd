# Generated by Class::Inline version 0.0.1
# Date: Wed Oct  5 12:38:56 2022
use strict;
use warnings;


package Sys::Cmd;our$_HAS;sub Sys::Cmd_CI::import {shift;$_HAS={@_ > 1 ? @_ : %{$_[0]}};$_HAS=$_HAS->{'has'}if exists$_HAS->{'has'}}our%_ATTRS;my%_BUILD_CHECK;sub new {my$class=shift;my$self={@_ ? @_ > 1 ? @_ : %{$_[0]}: ()};%_ATTRS=map {($_=>1)}keys %$self;bless$self,ref$class || $class;$_BUILD_CHECK{$class}//= do {my@possible=($class);my@BUILD;my@CHECK;while (@possible){no strict 'refs';my$c=shift@possible;push@BUILD,$c .'::BUILD' if exists &{$c .'::BUILD'};push@CHECK,$c .'::__CHECK' if exists &{$c .'::__CHECK'};push@possible,@{$c .'::ISA'}}[reverse(@CHECK),reverse(@BUILD)]};map {$self->$_}@{$_BUILD_CHECK{$class}};Carp::carp("Sys::Cmd attribute '$_' unexpected")for keys%_ATTRS;$self}sub __RO {my (undef,undef,undef,$sub)=caller(1);Carp::croak("attribute $sub is read-only")}sub __CHECK {map {delete $_[0]->{$_}}'core','exit','pid','signal','stderr','stdin','stdout';if (my@missing=grep {not exists $_[0]->{$_}}'cmd'){Carp::croak('Sys::Cmd attribute(s) required: ' .join(', ',@missing))}no strict 'refs';my$_attrs=*{ref($_[0]).'::_ATTRS'};map {delete$_attrs->{$_}}keys %$_HAS;$_[0]{'cmd'}=eval {$_HAS->{'cmd'}->{'isa'}->($_[0]{'cmd'})};Carp::croak('invalid (Sys::Cmd::cmd) value: ' .$@)if $@;$_[0]{'env'}=eval {$_HAS->{'env'}->{'isa'}->($_[0]{'env'})}if exists $_[0]{'env'};Carp::croak('invalid (Sys::Cmd::env) value: ' .$@)if $@}sub _code {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'_code'}//= $_HAS->{'_code'}->{'default'}->($_[0])}sub cmd {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'cmd'}}sub core {if (@_ > 1){$_[0]{'core'}=$_[1];return $_[0]}$_[0]{'core'}}sub dir {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'dir'}}sub encoding {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'encoding'}//= $_HAS->{'encoding'}->{'default'}->($_[0])}sub env {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'env'}}sub exit {if (@_ > 1){$_[0]{'exit'}=$_[1];return $_[0]}$_[0]{'exit'}}sub input {$_[0]->__RO($_[1])if @_ > 1;$_[0]{'input'}}sub on_exit {if (@_ > 1){$_[0]{'on_exit'}=$_[1];return $_[0]}$_[0]{'on_exit'}}sub pid {if (@_ > 1){$_[0]{'pid'}=$_[1];return $_[0]}$_[0]{'pid'}}sub signal {if (@_ > 1){$_[0]{'signal'}=$_[1];return $_[0]}$_[0]{'signal'}}sub stderr {if (@_ > 1){$_[0]{'stderr'}=$_[1];return $_[0]}elsif (!exists $_[0]{'stderr'}){$_[0]->stderr($_HAS->{'stderr'}->{'default'}->($_[0]))}$_[0]{'stderr'}//= $_HAS->{'stderr'}->{'default'}->($_[0])}sub stdin {if (@_ > 1){$_[0]{'stdin'}=$_[1];return $_[0]}elsif (!exists $_[0]{'stdin'}){$_[0]->stdin($_HAS->{'stdin'}->{'default'}->($_[0]))}$_[0]{'stdin'}//= $_HAS->{'stdin'}->{'default'}->($_[0])}sub stdout {if (@_ > 1){$_[0]{'stdout'}=$_[1];return $_[0]}elsif (!exists $_[0]{'stdout'}){$_[0]->stdout($_HAS->{'stdout'}->{'default'}->($_[0]))}$_[0]{'stdout'}//= $_HAS->{'stdout'}->{'default'}->($_[0])}BEGIN {$INC{'Sys/Cmd.pm'}=__FILE__}
1;
